generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl"]
  previewFeatures = ["driverAdapters"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id         String      @id @default(uuid())
  name       String
  email      String      @unique
  password   String
  role       Role        @default(OWNER)
  createdAt  DateTime    @default(now())
  updatedAt  DateTime    @updatedAt
  adegaId    String
  actionLogs ActionLog[]
  Order      Order[]
  adega      Adega       @relation(fields: [adegaId], references: [id], onDelete: Cascade)

  @@index([adegaId])
  @@index([role])
  @@map("users")
}

model Adega {
  id           String   @id @default(uuid())
  name         String   @unique
  createdAt    DateTime @default(now())
  updatedAt    DateTime @updatedAt
  city         String
  neighborhood String
  phone        String
  state        String   @db.VarChar(2)
  zipCode      String

  categories        Category[]
  orders            Order[]
  products          Product[]
  reports           Report[]
  StockHistory      StockHistory[]
  Stock             Stock[]
  users             User[]
  financialRecord   FinancialRecord[]
  productSales      ProductSalesSummary[]
  storeSalesSummary StoreSalesSummary?

  @@index([name])
  @@map("adegas")
}

model Category {
  id        String    @id @default(uuid())
  name      String
  icon      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  adegaId   String
  adega     Adega     @relation(fields: [adegaId], references: [id], onDelete: Cascade)
  products  Product[]

  @@unique([adegaId, name])
  @@map("categories")
}

model Product {
  id           String                @id @default(uuid())
  name         String
  description  String?
  price        Float
  imageUrl     String?
  createdAt    DateTime              @default(now())
  updatedAt    DateTime              @updatedAt
  adegaId      String
  categoryId   String?
  OrderItem    OrderItem[]
  adega        Adega                 @relation(fields: [adegaId], references: [id], onDelete: Cascade)
  category     Category?             @relation(fields: [categoryId], references: [id], onDelete: Cascade)
  stockHistory StockHistory[]
  stock        Stock?
  productSales ProductSalesSummary[]

  @@index([adegaId])
  @@index([categoryId])
  @@map("products")
}

model Stock {
  id        String   @id @default(uuid())
  productId String   @unique
  quantity  Int
  updatedAt DateTime @updatedAt
  lowStock  Int      @default(0) @map("low_stock")
  adegaId   String
  adega     Adega    @relation(fields: [adegaId], references: [id], onDelete: Cascade)
  product   Product  @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([adegaId, quantity])
  @@map("stocks")
}

model StockHistory {
  id        String          @id @default(uuid())
  productId String
  createdAt DateTime        @default(now())
  quantity  Int
  reason    String?
  type      StockChangeType
  adegaId   String
  adega     Adega           @relation(fields: [adegaId], references: [id], onDelete: Cascade)
  product   Product         @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([productId])
  @@index([createdAt])
  @@index([adegaId, type])
  @@map("stock_history")
}

model Order {
  id        String      @id @default(uuid())
  reg       Int         @default(autoincrement())
  userId    String
  total     Float
  status    OrderStatus @default(PENDING)
  createdAt DateTime    @default(now())
  updatedAt DateTime    @updatedAt
  adegaId   String
  items     OrderItem[]
  adega     Adega       @relation(fields: [adegaId], references: [id], onDelete: Cascade)
  user      User        @relation(fields: [userId], references: [id], onDelete: Cascade)
  payment   Payment?

  @@index([adegaId])
  @@index([status])
  @@index([adegaId, status])
  @@index([createdAt])
  @@index([userId, createdAt])
  @@map("orders")
}

model OrderItem {
  id        String  @id @default(uuid())
  orderId   String
  productId String
  quantity  Int
  price     Float
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([productId])
  @@map("order_items")
}

model StoreSalesSummary {
  id      String @id @default(uuid())
  adegaId String
  total   Int    @default(0)
  adega   Adega  @relation(fields: [adegaId], references: [id])

  @@unique([adegaId])
  @@map("store_sales_summary")
}

model ProductSalesSummary {
  id        String @id @default(uuid())
  adegaId   String
  productId String
  totalSold Int    @default(0)

  adega   Adega   @relation(fields: [adegaId], references: [id], onDelete: Cascade)
  product Product @relation(fields: [productId], references: [id], onDelete: Cascade)

  @@unique([adegaId, productId])
  @@map("product_sales_summary")
}

model Report {
  id       String     @id @default(uuid())
  date     DateTime   @default(now())
  type     ReportType
  data     Json
  filePath String
  adegaId  String
  adega    Adega      @relation(fields: [adegaId], references: [id], onDelete: Cascade)

  @@index([adegaId])
  @@index([type, date])
  @@map("reports")
}

model Payment {
  id            String        @id @default(uuid())
  orderId       String        @unique
  method        PaymentMethod
  status        PaymentStatus
  amount        Float
  transactionId String?
  createdAt     DateTime      @default(now())
  order         Order         @relation(fields: [orderId], references: [id], onDelete: Cascade)

  @@index([orderId])
  @@index([method])
  @@index([status])
  @@map("payments")
}

model FinancialRecord {
  id         String   @id @default(uuid())
  date       DateTime
  totalSales Float
  adegaId    String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  adega Adega @relation(fields: [adegaId], references: [id], onDelete: Cascade)

  @@unique([adegaId, date])
  @@map("financial_records")
}

model ActionLog {
  id        String   @id @default(uuid())
  userId    String
  action    String
  details   Json?
  createdAt DateTime @default(now())
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
  @@map("action_logs")
}

enum Role {
  OWNER
  ATTENDANT
}

enum StockChangeType {
  INCREMENT
  DECREMENT
}

enum OrderStatus {
  PENDING
  COMPLETED
  CANCELLED
}

enum ReportType {
  DAILY
  WEEKLY
  MONTHLY
  FINANCIAL
  INVENTORY
  SALES
  CUSTOM
}

enum PaymentMethod {
  CASH
  PIX
  CARD
}

enum PaymentStatus {
  PENDING
  SUCCESS
  FAILED
}
